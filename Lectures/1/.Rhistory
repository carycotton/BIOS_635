mapping=aes(x=AGE_GROUP, y=ETA, fill=GCHAR))+
geom_boxplot()
ggsave("mnlfa_results/all_social/mnlfa_score_boxplot.jpg")
MplusOutput_r3 <-
unlist(read.delim(file.path(mplus_path,
"round3calibration.out",sep=""),
blank.lines.skip=FALSE))
rownames(MplusOutput_r3) <- NULL
start_index <- which(MplusOutput_r3=="MODEL RESULTS")
end_index <- which(MplusOutput_r3=="QUALITY OF NUMERICAL RESULTS")
model_ests <- data.frame(MplusOutput_r3[start_index:(end_index-1)])
model_ests
model_ests
model_ests <- data.frame(MplusOutput_r3[start_index:(end_index-1)])
row.names(model_ests) <- NULL
names(model_ests) <- NULL
model_ests
model_ests
library(aMNLFA)
# x_var_data %>%
#   group_by(VNUM, GCHAR) %>%
#   summarise(mean_Q5=mean(Q5, na.rm=TRUE),
#             mean_Q9=mean(Q9, na.rm=TRUE))
mnlfa_obj <-
aMNLFA.object(dir = mplus_path,
mrdata = x_var_data %>% filter(eval(parse(text=
paste0("!(",
paste0("is.na(",items,")==1",
collapse = "&"),
")")
)
)
),
indicators = items,
catindicators =
items,
time = "AGE",
meanimpact = c("GNUM", "AGE"),
varimpact = "GNUM",
measinvar = c("GNUM", "AGE", "IQMULL"),
factors = "GCHAR",
ID = "ID",
thresholds = FALSE)
# Plots of items by factors
aMNLFA.itemplots(mnlfa_obj)
# Create calibration sample (randomly choose 1 obs. per subject)
# Set seed
set.seed(12)
aMNLFA.sample(mnlfa_obj)
# Load edited aMNLFA functions
detach("package:aMNLFA", unload = TRUE)
files.sources = list.files(paste0(mplus_path,"/aMNFLA_edit_fns/"),
full.names = TRUE)
sapply(files.sources, source)
# Create initial model objs
aMNLFA.initial(mnlfa_obj)
View(aMNLFA.simultaneous)
input.object <- mnlfa_obj
dir = input.object$dir
mrdata = input.object$mrdata
myindicators = input.object$indicators
mycatindicators = input.object$catindicators
mycountindicators = input.object$countindicators
myMeanImpact = input.object$meanimpact
myVarImpact = input.object$varimpact
myMeasInvar = input.object$measinvar
mytime = input.object$time
myauxiliary = input.object$auxiliary
myID = input.object$ID
thresholds = input.object$thresholds
varlist<-c(myID,myauxiliary,myindicators,myMeasInvar,myMeanImpact,myVarImpact)
varlist<-unique(varlist)
USEVARIABLES<-paste("USEVARIABLES=")
semicolon<-paste(";")
AUXILIARY<-ifelse(length(myauxiliary)>0,paste("AUXILIARY="),paste("!"))
AUXILIARY<-append(AUXILIARY,myauxiliary)
AUXILIARY<-noquote(append(AUXILIARY,semicolon))
AUXILIARY<-utils::capture.output(cat(AUXILIARY))
CATEGORICAL<-paste("CATEGORICAL=")
CATEGORICAL<-append(CATEGORICAL,mycatindicators)
CATEGORICAL<-noquote(append(CATEGORICAL,semicolon))
CATEGORICAL<-utils::capture.output(cat(CATEGORICAL))
COUNT<-paste("COUNT=")
COUNT<-append(COUNT,mycountindicators)
COUNT<-noquote(append(COUNT,semicolon))
COUNT<-utils::capture.output(cat(COUNT))
ANALYSIS<-noquote("ANALYSIS: ESTIMATOR=ML;ALGORITHM=INTEGRATION;INTEGRATION=MONTECARLO;PROCESSORS=4;")
ETA<-paste("ETA BY ")
l<-length(myindicators)
loadings<-list()
for (i in 1:l){
loadings[i]<-paste(ETA,myindicators[i],"*(l_",i,");",sep="")
}
loadings<-noquote(loadings)
loadings<-unlist(loadings)
tech1<-paste("OUTPUT: tech1;")
MODEL<-paste("MODEL: [ETA@0]; ETA@1;")
CONSTRAINT<-paste("CONSTRAINT=")
varMODEL<-paste("MODEL: [ETA@0];ETA*(veta);")
MODELCONSTRAINT<-paste("MODEL CONSTRAINT: new(")
####ROUND 1 USES p<.05 AS GATE TO GET TO ROUND 2 FOR MEAS INV and p<.1 for IMPACT####################
##Read in mean impact script and test for impact at p<.1
# Remove excess output else creates error
meanimpact_v0 <- read.delim(file.path(dir,"meanimpactscript.out",sep=""), blank.lines.skip=FALSE)
start_delete_index <- which(grepl("RESULTS IN PROBABILITY SCALE", unlist(meanimpact_v0)))
end_delete_index <- which(grepl("BRANT WALD TEST FOR PROPORTIONAL ODDS", unlist(meanimpact_v0)))
start_delete_index
start_delete_index
end_delete_index
end_delete_index[length(end_delete_index)]
files.sources = list.files(paste0(mplus_path,"/aMNFLA_edit_fns/"),
full.names = TRUE)
sapply(files.sources, source)
aMNLFA.simultaneous(mnlfa_obj)
aMNLFA.final(mnlfa_obj)
aMNLFA.scores(mnlfa_obj)
aMNLFA.scoreplots(mnlfa_obj)
input.object <- mnlfa_obj
dir = input.object$dir
mrdata = input.object$mrdata
myindicators = input.object$indicators
mytime = input.object$time
myfactors = input.object$factors
myauxiliary = input.object$auxiliary
myID = input.object$ID
#####Read in scores and merge with data
# Remove excess output else creates error
MplusOutput_v0 <- read.delim(file.path(dir,"scoring.out",sep=""), blank.lines.skip=FALSE)
start_delete_index <- which(grepl("RESULTS IN PROBABILITY SCALE", unlist(MplusOutput_v0)))
end_delete_index <- which(grepl("QUALITY OF NUMERICAL RESULTS", unlist(MplusOutput_v0)))
if(length(start_delete_index)>0&length(end_delete_index)>0){
MplusOutput_edit <- data.frame(MplusOutput_v0[-(start_delete_index:(end_delete_index-1)),])
colnames(MplusOutput_edit) <- colnames(MplusOutput_v0)
write.table(MplusOutput_edit,file.path(dir,"scoring.out",sep=""),append=F,row.names=FALSE,col.names=TRUE,quote=FALSE)
}else{
message("RESULTS IN PROBABILITY SCALE or QUALITY OF NUMERICAL RESULTS not found, continuing as normal")
}
MplusOutput<-file.path(dir,"scoring.out",sep="")
modelResults <- MplusAutomation::readModels(MplusOutput)
varorder<-modelResults$savedata_info$fileVarNames
factorscores<-utils::read.table(file.path(dir,"scores.dat",sep=""),header=FALSE)
colnames(factorscores)<-varorder
keep<-c(myID,"ETA")
mrdata_data_items_all_missing <- rownames_to_column(mrdata) %>%
filter(eval(parse(text=
paste0("!(",
paste0("is.na(",myindicators,")==1",
collapse = "&"),
")")
)
)
) %>%
filter(eval(parse(text=
paste0("!(",
paste0("is.na(",
unique(c(input.object$measinvar,
input.object$meanimpact,
input.object$varimpact)),
")==1",
collapse = "|"),
")")
)
)
) %>%
select(-rowname)
if(is.null(mytime) == 1){
data_plus_scores <- cbind(mrdata_data_items_all_missing %>%
select(-myID),
factorscores) %>%
select(myID, everything())
}else{
data_plus_scores <- cbind(mrdata_data_items_all_missing %>%
select(-myID),
factorscores[keep]) %>%
select(myID, mytime, everything())
}
sc<-data_plus_scores
dir = input.object$dir
mrdata = input.object$mrdata
myindicators = input.object$indicators
mytime = input.object$time
myfactors = input.object$factors
myauxiliary = input.object$auxiliary
myID = input.object$ID
#####Read in scores and merge with data
# Remove excess output else creates error
MplusOutput_v0 <- read.delim(file.path(dir,"scoring.out",sep=""), blank.lines.skip=FALSE)
start_delete_index <- which(grepl("RESULTS IN PROBABILITY SCALE", unlist(MplusOutput_v0)))
end_delete_index <- which(grepl("QUALITY OF NUMERICAL RESULTS", unlist(MplusOutput_v0)))
if(length(start_delete_index)>0&length(end_delete_index)>0){
MplusOutput_edit <- data.frame(MplusOutput_v0[-(start_delete_index:(end_delete_index-1)),])
colnames(MplusOutput_edit) <- colnames(MplusOutput_v0)
write.table(MplusOutput_edit,file.path(dir,"scoring.out",sep=""),append=F,row.names=FALSE,col.names=TRUE,quote=FALSE)
}else{
message("RESULTS IN PROBABILITY SCALE or QUALITY OF NUMERICAL RESULTS not found, continuing as normal")
}
MplusOutput<-file.path(dir,"scoring.out",sep="")
modelResults <- MplusAutomation::readModels(MplusOutput)
varorder<-modelResults$savedata_info$fileVarNames
factorscores<-utils::read.table(file.path(dir,"scores.dat",sep=""),header=FALSE)
colnames(factorscores)<-varorder
dim(factorscores)
View(factorscores)
plusOutput<-file.path(dir,"scoring.out",sep="")
modelResults <- MplusAutomation::readModels(MplusOutput)
varorder<-modelResults$savedata_info$fileVarNames
factorscores<-utils::read.table(file.path(dir,"scores.dat",sep=""),header=FALSE)
colnames(factorscores)<-varorder
keep<-c(myID,"ETA")
mrdata_data_items_all_missing <- rownames_to_column(mrdata) %>%
filter(eval(parse(text=
paste0("!(",
paste0("is.na(",myindicators,")==1",
collapse = "&"),
")")
)
)
) %>%
filter(eval(parse(text=
paste0("!(",
paste0("is.na(",
c("GNUM", "AGE"),
")==1",
collapse = "|"),
")")
)
)
) %>%
select(-rowname)
if(is.null(mytime) == 1){
data_plus_scores <- cbind(mrdata_data_items_all_missing %>%
select(-myID),
factorscores) %>%
select(myID, everything())
}else{
data_plus_scores <- cbind(mrdata_data_items_all_missing %>%
select(-myID),
factorscores[keep]) %>%
select(myID, mytime, everything())
}
sc<-data_plus_scores
if (is.null(mytime) == 0) sc$time<-unlist(data_plus_scores[mytime])
if (is.null(mytime) == 0) sc$time<-as.numeric(sc$time)
if (is.null(mytime) == 0) sc$time<-round(sc$time,.1)
if (is.null(mytime) == 0) sc$time<-as.factor(sc$time)
if (is.null(mytime) == 0) p<-with(sc,ggplot2::ggplot(sc, aes(factor(time),ETA))) + with(sc,ggplot2::geom_boxplot()) + with(sc,ggplot2::labs(x=paste(mytime))) + with(sc,ggplot2::ggtitle("Factor Score Estimates over Time"))
if (is.null(mytime) == 0) filename<-file.path(dir,"eta_by_time.png",sep="")
if (is.null(mytime) == 0) grDevices::png(filename=filename,
units="in",
width=11,
height=8.5,
pointsize=12,
res=72)
if (is.null(mytime) == 0) p
if (is.null(mytime) == 0) grDevices::dev.off()
#Visualize indicators as a function of time and moderators
#re-structure data to allow facet_wrap visualization
if (is.null(mytime) == 0) etalong<-reshape2::melt(data_plus_scores,id.vars=c(myID,mytime,myfactors,"ETA"),measure.vars="ETA")
if (is.null(mytime) == 1) etalong<-reshape2::melt(data_plus_scores,id.vars=c(myID,myfactors,"ETA"),measure.vars="ETA")
#attach(etalong) #Should not use attach in here -- downstream references now resolved
etalong$AvgEtaScore<-as.character(etalong$value)
etalong$AvgEtaScore<-as.numeric(etalong$AvgEtaScore)
if (is.null(mytime) == 0) etalong$time<-unlist(etalong[mytime])
if (is.null(mytime) == 0) etalong$time<-as.numeric(etalong$time)
if (is.null(mytime) == 0) etalong$time<-round(etalong$time,.1)
if (is.null(mytime) == 0) etalong$time<-as.factor(etalong$time)
mrdata<-mrdata[order(mrdata[myID]),]
srdatacheck<-mrdata[!duplicated(mrdata[myID]),]
N<-dim(srdatacheck)[1]
min<-.01*N
if (is.null(mytime) == 0) aggetalong<-stats::aggregate(AvgEtaScore~variable+time,etalong,FUN="mean")
if (is.null(mytime) == 0) aggetalong2<-stats::aggregate(AvgEtaScore~variable+time,etalong,FUN="length")
if (is.null(mytime) == 0) aggetalong$N<-aggetalong2$AvgEtaScore
if (is.null(mytime) == 0) margeta<-with(aggetalong,ggplot2::ggplot(aggetalong,aes(x=time,y=AvgEtaScore))) + with(aggetalong,ggplot2::facet_wrap(~ variable,nrow=1)) + with(aggetalong,ggplot2::geom_point(aes(size=N))) + with(aggetalong,ggplot2::stat_smooth(se=FALSE)) + with(aggetalong,ggplot2::theme_bw()) + with(aggetalong,ggplot2::labs(title="Average Factor Score Estimate over Time")) + with(aggetalong,ggplot2::theme(legend.position="bottom"))
#plot for each moderator
l<-length(myfactors)
if (is.null(mytime) == 0) p=list()
if (is.null(mytime) == 0) p[[1]]<-margeta
if (is.null(mytime) == 0)
for (i in 1:l){
keep<-c("AvgEtaScore","time",myfactors[i])
etalongmod<-etalong[keep]
names(etalongmod)[3]<-"Moderator"
ic<-etalongmod$Moderator=="."|is.na(etalongmod$Moderator)|etalongmod$Moderator=="NA"
cc_long<-etalongmod[which(ic=="FALSE"),]
aggetalongmod<-stats::aggregate(AvgEtaScore~time+Moderator,cc_long,FUN="mean")
aggetalongmod<-stats::aggregate(AvgEtaScore~time+Moderator,etalongmod,FUN="mean")
aggetalongmod_2<-stats::aggregate(AvgEtaScore~time+Moderator,etalongmod,FUN="length")
aggetalongmod$N<-aggetalongmod_2$AvgEtaScore
aggetalongmod<-aggetalongmod[which(aggetalongmod$N>min),]
title<-paste("Average Factor ScoreEstimate over Time by ",myfactors[i],sep="")
p[[i+1]]<-with(aggetalongmod,ggplot2::ggplot(aggetalongmod,aes(x=time,y=AvgEtaScore))) + with(aggetalongmod,ggplot2::geom_point(aes(size=N,colour=Moderator))) + with(aggetalongmod,ggplot2::stat_smooth(se=FALSE,aes(colour=Moderator))) + with(aggetalongmod,ggplot2::theme_bw()) + with(aggetalongmod,ggplot2::labs(title=title)) + with(aggetalongmod,ggplot2::theme(legend.position="bottom")) + with(aggetalongmod,ggplot2::guides(size=FALSE))
}
if (is.null(mytime) == 0) filename<-file.path(dir,"factorscoreplots.png",sep="")
if (is.null(mytime) == 0) grDevices::png(filename=filename,
units="in",
width=11,
height=8.5,
pointsize=12,
res=72)
if (is.null(mytime) == 0) if (length(myfactors)>1) {
graphics::par(mfrow=c(1,length(myfactors)))
p
graphics::par(mfrow=c(1,1))
}
#do.call(gridExtra::grid.arrange,p)
if (is.null(mytime) == 0) if (length(myfactors)==1) p
if (is.null(mytime) == 0) grDevices::dev.off()
if (is.null(mytime) == 0) message("Check '", dir, "/' for png file with factor score plots")
if (is.null(mytime) == 1)
l<-length(myfactors)
p<-list()
for (i in 1:l){
keep<-c("AvgEtaScore",myfactors[i])
etalongmod<-etalong[keep]
names(etalongmod)[2]<-"Moderator"
ic<-etalongmod$Moderator=="."|is.na(etalongmod$Moderator)|etalongmod$Moderator=="NA"
cc_long<-etalongmod[which(ic=="FALSE"),]
title<-paste("Average Factor ScoreEstimate by ",myfactors[i],sep="")
p[[i+1]]<-with(cc_long,ggplot2::ggplot(cc_long,ggplot2::aes(x=factor(Moderator),y=AvgEtaScore))) + with(cc_long,ggplot2::geom_boxplot()) + with(cc_long,ggplot2::theme_bw()) + with(cc_long,ggplot2::labs(title=title)) + with(cc_long,ggplot2::theme(legend.position="bottom"))
}
if (is.null(mytime) == 1) filename<-fixPath(file.path(dir,"factorscoreplots.png",sep=""))
if (is.null(mytime) == 1) grDevices::png(filename=filename,
units="in",
width=11,
height=8.5,
pointsize=12,
res=72)
if (is.null(mytime) == 1) if (length(myfactors)>1) {
graphics::par(mfrow=c(1,length(myfactors)))
p
graphics::par(mfrow=c(1,1))
}
#do.call(gridExtra::grid.arrange,p)
if (is.null(mytime) == 1) if (length(myfactors)==1) p
if (is.null(mytime) == 1) grDevices::dev.off()
if (is.null(mytime) == 1) message("Check '", dir, "/' for png file with factor score plots")
##Empirical ICCs
itemlong<-reshape2::melt(data_plus_scores,id.vars=c(myfactors,myindicators,"ETA"),measure.vars=myindicators)
itemlong$value<-as.character(itemlong$value)
itemlong$value<-as.numeric(itemlong$value)
#attach(itemlong) #Should not have attach in here -- removed downstream references
itemlong$roundETA<-ifelse(itemlong$ETA < -2.75,-3,itemlong$ETA)
itemlong$roundETA<-ifelse(itemlong$ETA > -2.75&itemlong$ETA< -2.25,-2.5,itemlong$roundETA)
itemlong$roundETA<-ifelse(itemlong$ETA > -2.25&itemlong$ETA< -1.75,-2,itemlong$roundETA)
itemlong$roundETA<-ifelse(itemlong$ETA > -1.75&itemlong$ETA< -1.25,-1.5,itemlong$roundETA)
itemlong$roundETA<-ifelse(itemlong$ETA > -1.25&itemlong$ETA< -.75,-1,itemlong$roundETA)
itemlong$roundETA<-ifelse(itemlong$ETA > -.75&itemlong$ETA< -.25,-.5,itemlong$roundETA)
itemlong$roundETA<-ifelse(itemlong$ETA > -.25&itemlong$ETA< .25,0,itemlong$roundETA)
itemlong$roundETA<-ifelse(itemlong$ETA > .25&itemlong$ETA< .75,.5,itemlong$roundETA)
itemlong$roundETA<-ifelse(itemlong$ETA > .75&itemlong$ETA< 1.25,1,itemlong$roundETA)
itemlong$roundETA<-ifelse(itemlong$ETA > 1.25&itemlong$ETA< 1.75,1.5,itemlong$roundETA)
itemlong$roundETA<-ifelse(itemlong$ETA > 1.75&itemlong$ETA< 2.25,2,itemlong$roundETA)
itemlong$roundETA<-ifelse(itemlong$ETA > 2.25&itemlong$ETA< 2.75,2.5,itemlong$roundETA)
itemlong$roundETA<-ifelse(itemlong$ETA > 2.75,3,itemlong$roundETA)
aggitemlong<-stats::aggregate(value~variable+roundETA,data=itemlong,FUN="mean")
aggitemlong$eta<-aggitemlong$roundETA
aggitemlong$item_response<-aggitemlong$value
ICC<-with(aggitemlong,ggplot2::ggplot(aggitemlong,ggplot2::aes(x=eta,y=item_response))) + with(aggitemlong,ggplot2::facet_wrap(~ variable,nrow=1)) + with(aggitemlong,ggplot2::stat_smooth(method='lm',formula=y~exp(x)/(1+exp(x)),se=FALSE)) + with(aggitemlong,ggplot2::theme_bw()) + with(aggitemlong,ggplot2::labs(title="Empirical Item Characteristic Curves")) + with(aggitemlong,ggplot2::theme(legend.position="bottom"))
filename<-file.path(dir,"ICCplots.png",sep="")
grDevices::png(filename=filename,
units="in",
width=11,
height=8.5,
pointsize=12,
res=72)
ICC
grDevices::dev.off()
message("Check '", dir, "/' for png file with empirical ICC plots")
utils::write.table(data_plus_scores, file.path(dir,"mr_with_scores.dat",sep=""), sep="\t",col.names=TRUE,row.names=FALSE)
message("Check '", dir, "/' for merged data file")
ggplot(data=data_plus_scores,
mapping=aes(x=AGE, y=ETA, color=GCHAR))+
geom_point()+
geom_smooth(aes(group=GCHAR), method="loess", se=FALSE)
ggsave("mnlfa_results/all_social/mnlfa_score_scatter.jpg")
ggplot(data=data_plus_scores %>%
mutate(AGE_GROUP=
factor(ifelse(AGE<10, "6 and 10 months",
ifelse(10<=AGE&AGE<=16, "10 and 16 months",
ifelse(22<=AGE&AGE<=28, "22 and 28 months",
ifelse(34<=AGE&AGE<=40,
"36 and 40 months",
ifelse(is.na(AGE)==1,NA,
"out of range"))))),
levels=c("6 and 10 months", "10 and 16 months",
"22 and 28 months", "36 and 40 months",
"out of range"))),
mapping=aes(x=AGE_GROUP, y=ETA, fill=GCHAR))+
geom_boxplot()
ggsave("mnlfa_results/all_social/mnlfa_score_boxplot.jpg")
MplusOutput_r3 <-
unlist(read.delim(file.path(mplus_path,
"round3calibration.out",sep=""),
blank.lines.skip=FALSE))
rownames(MplusOutput_r3) <- NULL
start_index <- which(MplusOutput_r3=="MODEL RESULTS")
end_index <- which(MplusOutput_r3=="QUALITY OF NUMERICAL RESULTS")
model_ests <- data.frame(MplusOutput_r3[start_index:(end_index-1)])
row.names(model_ests) <- NULL
names(model_ests) <- NULL
model_ests
model_ests
add(1,1)
?sum
class(1)
class("1")
class(TRUE) # logical
class(NA)
x <- data.frame(c(1,2,3,4), c("a,b,c,d")) # each argument is a new column
class(x)
typeof(x)
data <- read.csv(file="../Data/AOSI_small.csv")
data
data <- read.csv(file="../Data/AOSI_small.csv", na.strings = ".")
data
print(x=1)
print(x=1)
print(1)
1
1
1
"hello world"
print("hello world")
a
"a"
a
x <- 1
x
print(x=x)
print(x)
x
x <- "hello world"
x
x = 1
x
x
x
x <- "hello world"
x <-
"hello world"
x
c(1,2,3,4)
c("a","b","c","d")
x <- c(1,2,3,4)
x
y <- c("a","b","c","d")
y
c(1,2,"c","d")
c(1,2,"a",TRUE)
matrix(c(1,2,3,4), nrow=2, ncol=2)
matrix(c("a","b","c","d"), nrow=2, ncol=2)
matrix(c("a","b",3,4), nrow=2, ncol=2)
matrix(c("a","b","3","4"), nrow=2, ncol=2)
list(c(1,2,3,4), c(5,6,7,8))
list(c("a","b","c","d"), c("e", "f"))
list(c(1,2,3,4),c("a","b","c","d"))
list(list(c(1,2,3,4), c("a","b")), list(c(5,6,7,8), c("c","d")))
sum(1,1)
1+1 # alias is +, alias means alternative name or "shortcut"
x <- 1
y <- 1
x+y
1+"1"
1+"a"
1-1
prod(1,2,3)
1*2*3
2/2
x <- prod(2,1/2) # result of function call prod(2,1/2) saved as object x
x
x <- prod(2,1/2) # result of function call prod(2,1/2) saved as object x
TRUE # special type: called logical
FALSE # other logical value. Used to test conditions (discussed later)
x <- 1
x
x <- 2
x
x <- c(1,2)
x
FALSE # other logical value. Used to test conditions (discussed later)
NA # denotes "missing value"
"NA"
NA
"hello world! :/\0" # characters can have spaces, non-letter symbols, numbers, ...
"hello world! :/\0"
"hello world! :0"
"hello world! :0!"
"hello world! :0!_
"
"hello world! :0!_"
x y <- "won't work" # R object names CANNOT have spaces
x_y <- "will work"
x_y
class(1) # numeric
class("1") # character
class(TRUE) # logical
x <- data.frame(c(1,2,3,4), c("a,b,c,d")) # each argument is a new column
x
data.frame(c(1,2,3,4), c("a,b,c,d"))
x <- data.frame(c(1,2,3,4), c("a","b","c","d")) # each argument is a new column
x
class(x) # can see of special class called data.frame
typeof(x) # but is actually just a special type of list
read.csv(file="../Data/AOSI_small.csv", na.strings = ".")
data <- read.csv(file="../Data/AOSI_small.csv", na.strings = ".")
data
View(data)
data <- read.csv(file="../Data/AOSI_small.csv")
data
data <- read.csv(file="../Data/AOSI_small.csv", na.strings = ".")
data
