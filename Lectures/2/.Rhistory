geom_vline(xintercept = 1, size = 2, linetype="dashed", color="red")+
geom_vline(xintercept = 4, size = 2, linetype="dashed", color="red")+
theme_bw()+
theme(text = element_text(size=15))
ggplot(data=nba_teams_data,
mapping=aes(y=W, x=NRtg))+
geom_point(size=2)+
geom_smooth(size=2, se=FALSE)+
scale_x_continuous(breaks = breaks_extended(n = 5))+
labs(x="Net Rating: ORTG-DRTG", y="Wins")+
geom_vline(xintercept = 2.5, size = 2)+
geom_vline(xintercept = 1, size = 2, linetype="dashed", color="red")+
geom_vline(xintercept = 4, size = 2, linetype="dashed", color="red")+
theme_bw()+
theme(text = element_text(size=15))
names(nba_teams_data)
lm_fit <- lm(W~ORtg+DRtg+SOS, data=nba_teams_data)
library(broom)
tidy(lm_fit)
library(gt)
library(flextable)
tidy(lm_fit) %>%
select(term, estimate, `p.value`) %>%
flextable()
tidy(lm_fit) %>%
select(term, estimate) %>%
flextable()
nba_teams_data_center <-
nba_teams_data %>%
mutate(ORtg = ORtg - mean(ORtg),
ORtg = DRtg - mean(DRtg),
SOS = SOS - mean(SOS))
# Fit linear model
lm_fit <- lm(W~ORtg+DRtg+SOS, data=nba_teams_data_center)
# Create table for results
tidy(lm_fit) %>%
select(term, estimate) %>%
flextable()
nba_teams_data_center <-
nba_teams_data %>%
mutate(ORtg = ORtg - mean(ORtg),
DRtg = DRtg - mean(DRtg),
SOS = SOS - mean(SOS))
# Fit linear model
lm_fit <- lm(W~ORtg+DRtg+SOS, data=nba_teams_data_center)
# Create table for results
tidy(lm_fit) %>%
select(term, estimate) %>%
flextable()
lm_mse <- sum((nba_teams_data_center$W-lm_fit$residuals)^2)
lm_mse <- mean((nba_teams_data_center$W-lm_fit$residuals)^2)
lm_mse
lm_mse <- mean(abs(nba_teams_data_center$W-lm_fit$residuals))
lm_mse
nba_teams_data_center$W
lm_mse <- mean(abs(lm_fit$residuals))
lm_mse
(lm_fit$residuals)
lm_mse <- mean((lm_fit$residuals)^2)
lm_mse
tidy(lm_fit) %>%
select(term, estimate) %>%
flextable() %>%
set_header_labels(term = "Feature Parameter", estimate = "Estimate") %>%
set_caption(caption = "Test")
tidy(lm_fit) %>%
select(term, estimate) %>%
flextable() %>%
set_header_labels(term = "Feature Parameter", estimate = "Estimate") %>%
add_header_lines(values =
c(paste0("Mean Absolute error = ", lm_abse),
paste0("Mean Sqaured error = ", lm_mse)))
lm_abse <- mean(abs(lm_fit$residuals))
lm_mse <- mean((lm_fit$residuals)^2)
# Create table for results
tidy(lm_fit) %>%
select(term, estimate) %>%
flextable() %>%
set_header_labels(term = "Feature Parameter", estimate = "Estimate") %>%
add_header_lines(values =
c(paste0("Mean Absolute error = ", lm_abse),
paste0("Mean Sqaured error = ", lm_mse)))
tidy(lm_fit) %>%
select(term, estimate) %>%
flextable() %>%
set_header_labels(term = "Feature Parameter", estimate = "Estimate") %>%
add_header_lines(values =
c(paste0("Mean Absolute error = ", round(lm_abse,2)),
paste0("Mean Sqaured error = ", round(lm_mse,2))))
tidy(lm_fit) %>%
select(term, estimate) %>%
flextable() %>%
set_header_labels(term = "Feature Parameter", estimate = "Estimate") %>%
add_header_lines(values =
c(paste0("Mean Absolute error = ", round(lm_abse,2)),
paste0("Mean Sqaured error = ", round(lm_mse,2)))) %>%
theme_box()
tidy(lm_fit) %>%
select(term, estimate) %>%
flextable() %>%
set_header_labels(term = "Feature Parameter", estimate = "Estimate") %>%
add_header_lines(values =
c(paste0("Mean Absolute error = ", round(lm_abse,2)),
paste0("Mean Sqaured error = ", round(lm_mse,2)))) %>%
set_table_properties(ft, width = 1, layout = "autofit")
tidy(lm_fit) %>%
select(term, estimate) %>%
flextable() %>%
set_header_labels(term = "Feature Parameter", estimate = "Estimate") %>%
add_header_lines(values =
c(paste0("Mean Absolute error = ", round(lm_abse,2)),
paste0("Mean Sqaured error = ", round(lm_mse,2)))) %>%
set_table_properties(width = 1, layout = "autofit")
tidy(lm_fit) %>%
select(term, estimate) %>%
flextable() %>%
set_header_labels(term = "Feature Parameter", estimate = "Estimate") %>%
add_header_lines(values =
c(paste0("Mean Absolute error = ", round(lm_abse,2)),
paste0("Mean Sqaured error = ", round(lm_mse,2)))) %>%
set_table_properties(width = 0.5, layout = "autofit")
tidy(lm_fit) %>%
select(term, estimate) %>%
flextable() %>%
set_header_labels(term = "Feature Parameter", estimate = "Estimate") %>%
add_header_lines(values =
c(paste0("Mean Absolute error = ", round(lm_abse,2)),
paste0("Mean Sqaured error = ", round(lm_mse,2)))) %>%
set_table_properties(width = 0.25, layout = "autofit")
tidy(lm_fit) %>%
select(term, estimate) %>%
flextable() %>%
set_header_labels(term = "Feature Parameter", estimate = "Estimate") %>%
add_header_lines(values =
c(paste0("Mean Absolute error = ", round(lm_abse,2)),
paste0("Mean Sqaured error = ", round(lm_mse,2)))) %>%
set_table_properties(width = 0.3, layout = "autofit")
library(plotly)
nba_teams_data_center <-
nba_teams_data %>%
mutate(ORtg = ORtg - mean(ORtg),
DRtg = DRtg - mean(DRtg))
# Fit linear model
lm_fit <- lm(W~ORtg+DRtg, data=nba_teams_data_center)
plot_ly(data=nba_teams_data_center,
x=~ORtg,
y=~DRtg,
z=W)
plot_ly(data=nba_teams_data_center,
x=~ORtg,
y=~DRtg,
z=~W)
persp(y=nba_teams_data_center$W,
x=nba_teams_data_center$ORtg,
z=nba_teams_data_center$DRtg)
nba_teams_data_center$W
library(scatterplot3d)
## Fit a linear regression
lmFit <- lm(y ~ x1 + x2, data = dat)
nba_teams_data_center <-
nba_teams_data %>%
mutate(ORtg = ORtg - mean(ORtg),
DRtg = DRtg - mean(DRtg))
# Fit linear model
lm_fit <- lm(W~ORtg+DRtg, data=nba_teams_data_center)
ORtg_sim <- seq(from = min(nba_teams_data_center$ORtg),
to =  max(nba_teams_data_center$ORtg),
by = 0.5)
DRtg_sim <- seq(from = min(nba_teams_data_center$DRtg),
to =  max(nba_teams_data_center$DRtg),
by = 0.5)
## Predict y
W_pred <- outer(X = ORtg_sim, Y = DRtg_sim,
FUN = function(x1, x2) {
predict(lm_fit, newdata = data.frame(ORtg = ORtg_sim, DRtg = DRtg_sim))
}
)
ORtg_sim
DRtg_sim
ORtg_sim <- seq(from = -5,
to =  5,
by = 0.5)
DRtg_sim <- seq(from = -5,
to =  5,
by = 0.5)
## Predict y
W_pred <- outer(X = ORtg_sim, Y = DRtg_sim,
FUN = function(x1, x2) {
predict(lm_fit, newdata = data.frame(ORtg = ORtg_sim, DRtg = DRtg_sim))
}
)
ORtg_sim
DRtg_sim
W_pred <- outer(X = ORtg_sim, Y = DRtg_sim,
FUN = function(ORtg, DRtg) {
predict(lm_fit, newdata = data.frame(ORtg = ORtg_sim, DRtg = DRtg_sim))
}
)
?outer
W_pred <- outer(X = ORtg_sim, Y = DRtg_sim,
FUN = function(ORtg_sim, DRtg_sim) {
predict(lm_fit, newdata = data.frame(ORtg = ORtg_sim, DRtg = DRtg_sim))
}
)
W_pred
persp(y=W_pred,
x=ORtg_sim,
z=DRtg_sim)
DRtg_sim
ORtg_sim
W_pred
persp(y=W_pred,
x=ORtg_sim,
z=DRtg_sim,
theta = 30, phi = 20, expand = 0.6, shade = 0.3)
length(W_pred)
?persp
persp()
persp(y=ORtg_sim,
x=DRtg_sim,
z=W_pred,
theta = 30, phi = 20, expand = 0.6, shade = 0.3)
nba_teams_data_center <-
nba_teams_data %>%
mutate(ORtg = ORtg - mean(ORtg),
DRtg = DRtg - mean(DRtg))
# Fit linear model
lm_fit <- lm(W~ORtg+DRtg, data=nba_teams_data_center)
ORtg <- seq(from = -5,
to =  5,
by = 0.5)
DRtg <- seq(from = -5,
to =  5,
by = 0.5)
## Predict y
W_pred <- outer(X = ORtg, Y = DRtg,
FUN = function(ORtg, DRtg) {
predict(lm_fit, newdata = data.frame(ORtg = ORtg, DRtg = DRtg))
}
)
persp(y=ORtg_sim,
x=DRtg_sim,
z=W_pred,
theta = 30, phi = 20, expand = 0.6, shade = 0.3)
install.packages("rgl")
# Center to make intercept interpretable
nba_teams_data_center <-
nba_teams_data %>%
mutate(ORtg = ORtg - mean(ORtg),
DRtg = DRtg - mean(DRtg))
# Fit linear model
lm_fit <- lm(W~ORtg+DRtg, data=nba_teams_data_center)
ORtg <- seq(from = -5,
to =  5,
by = 0.5)
DRtg <- seq(from = -5,
to =  5,
by = 0.5)
## Predict y
W_pred <- outer(X = ORtg, Y = DRtg,
FUN = function(ORtg, DRtg) {
predict(lm_fit, newdata = data.frame(ORtg = ORtg, DRtg = DRtg))
}
)
persp(y=DRtg,
x=ORtg,
z=W_pred,
theta = 30, phi = 20, expand = 0.6, shade = 0.3)
persp(y=ORtg,
x=DRtg,
z=W_pred,
theta = 30, phi = 20, expand = 0.6, shade = 0.3)
# Center to make intercept interpretable
nba_teams_data_center <-
nba_teams_data %>%
mutate(ORtg = ORtg - mean(ORtg),
DRtg = -(DRtg - mean(DRtg)))
# Fit linear model
lm_fit <- lm(W~ORtg+DRtg, data=nba_teams_data_center)
ORtg <- seq(from = -5,
to =  5,
by = 0.5)
DRtg <- seq(from = -5,
to =  5,
by = 0.5)
## Predict y
W_pred <- outer(X = ORtg, Y = DRtg,
FUN = function(ORtg, DRtg) {
predict(lm_fit, newdata = data.frame(ORtg = ORtg, DRtg = DRtg))
}
)
persp(y=ORtg,
x=DRtg,
z=W_pred,
theta = 30, phi = 20, expand = 0.6, shade = 0.3)
library(tidyverse)
library(ggpubr)
library(scales)
library(broom)
library(flextable)
library(scatterplot3d)
install.packages("scatterplot3d")
library(tidyverse)
library(ggpubr)
library(scales)
library(broom)
library(flextable)
library(scatterplot3d)
library(rgl)
persp3d(y=ORtg,
x=DRtg,
z=W_pred,
theta = 30, phi = 20, expand = 0.6, shade = 0.3)
?persp
persp(y=ORtg,
x=DRtg,
z=W_pred,
theta = 30, phi = 20, expand = 0.6, shade = 0.3, col = "lightblue")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 11, fig.height = 4)
library(tidyverse)
library(ggpubr)
library(scales)
library(broom)
library(flextable)
library(scatterplot3d)
library(rgl)
nba_teams_data <- read_csv("../data/nba_teams_19_20.csv") %>%
mutate(playoffs=ifelse(grepl("\\*",Team), "Yes", "No"),
Team=gsub("[*]","",Team)) %>%
filter(Team!="League Average")
y_var <- "W"
x_vars <- c("ORtg", "DRtg", "SOS")
y_var_label <- "Wins"
x_vars_labels <- c("Offensive Rating (ORTG)", "Defensive Rating (DRTG)", "Strength of Opponents (SOS)")
plots_list <- list()
for(i in 1:length(x_vars)){
plots_list[[i]] <-
ggplot(data=nba_teams_data,
mapping=aes_string(y=y_var, x=x_vars[i]))+
geom_point(size=2)+
geom_smooth(method="lm", size=2, se=FALSE)+
scale_x_continuous(breaks = breaks_extended(n = 5))+
labs(x=x_vars_labels[i], y=y_var_label)+
theme_bw()+
theme(text = element_text(size=15))
}
ggarrange(plotlist=plots_list, nrow = 1)
ggplot(diamonds,
mapping = aes(x=carat, y=price))+
geom_point(size=2, color="gray")+
geom_smooth(size=2, se=FALSE)+
geom_vline(xintercept = 2, size=2)+
labs(x="X", y="Y")+
theme_bw()+
theme(text=element_text(size=15))
ggplot(data=nba_teams_data,
mapping=aes(y=W, x=NRtg))+
geom_point(size=2)+
geom_smooth(size=2, se=FALSE)+
scale_x_continuous(breaks = breaks_extended(n = 5))+
labs(x="Net Rating: ORTG-DRTG", y="Wins")+
geom_vline(xintercept = 2.5, size = 2)+
geom_vline(xintercept = 1, size = 2, linetype="dashed", color="red")+
geom_vline(xintercept = 4, size = 2, linetype="dashed", color="red")+
theme_bw()+
theme(text = element_text(size=15))
# Center to make intercept interpretable
nba_teams_data_center <-
nba_teams_data %>%
mutate(ORtg = ORtg - mean(ORtg),
DRtg = DRtg - mean(DRtg),
SOS = SOS - mean(SOS))
# Fit linear model
lm_fit <- lm(W~ORtg+DRtg+SOS, data=nba_teams_data_center)
# Calc MSE
lm_abse <- mean(abs(lm_fit$residuals))
lm_mse <- mean((lm_fit$residuals)^2)
# Create table for results
tidy(lm_fit) %>%
select(term, estimate) %>%
flextable() %>%
set_header_labels(term = "Feature Parameter", estimate = "Estimate") %>%
add_header_lines(values =
c(paste0("Mean Absolute Error = ", round(lm_abse,2)),
paste0("Mean Sqaured Error = ", round(lm_mse,2)))) %>%
set_table_properties(width = 0.3, layout = "autofit")
# Center to make intercept interpretable
nba_teams_data_center <-
nba_teams_data %>%
mutate(ORtg = ORtg - mean(ORtg),
DRtg = -(DRtg - mean(DRtg)))
# Fit linear model
lm_fit <- lm(W~ORtg+DRtg, data=nba_teams_data_center)
ORtg <- seq(from = -5,
to =  5,
by = 0.5)
DRtg <- seq(from = -5,
to =  5,
by = 0.5)
## Predict y
W <- outer(X = ORtg, Y = DRtg,
FUN = function(ORtg, DRtg) {
predict(lm_fit, newdata = data.frame(ORtg = ORtg, DRtg = DRtg))
}
)
persp(y=ORtg,
x=DRtg,
z=W,
theta = 30, phi = 20, expand = 0.6, shade = 0.3, col = "lightblue")
print("MSE = ", lm_mse)
print("Mean Absolute Error = ", lm_abse)
nba_teams_data_center <-
nba_teams_data %>%
mutate(ORtg = ORtg - mean(ORtg),
DRtg = DRtg - mean(DRtg),
SOS = SOS - mean(SOS),
test_train = rbinom(dim(nba_teams_data)[1], 1, 0.5))
nba_teams_data_center$test_train
nba_teams_train <- nba_teams_data_center %>% filter(test_train==0)
nba_teams_test <- nba_teams_data_center %>% filter(test_train==1)
lm_fit <- lm(W~ORtg+DRtg+SOS, data=nba_teams_train)
lm_fit
lm_fit <- lm(W~ORtg+DRtg+SOS, data=nba_teams_center)
lm_fit <- lm(W~ORtg+DRtg+SOS, data=nba_teams_data_center)
lm_fit
lm_fit <- lm(W~ORtg+DRtg+SOS, data=nba_teams_train)
lm_fit
test_set_predicts <- predict(lm_fit, newdata = nba_teams_test)
nba_teams_test <- nba_teams_test %>%
mutate(predicted_wins = test_set_predicts)
View(nba_teams_test)
lm_abse <- mean(abs(nba_teams_test$W - nba_teams_test$predicted_wins))
lm_mse <- mean((nba_teams_test$W - nba_teams_test$predicted_wins)^2)
lm_abse
lm_mse
print("Training Set; MSE = ", mean(abs(lm_fit$residuals)))
lm_fit$residuals
mean(abs(lm_fit$residuals))
# Center to make intercept interpretable
nba_teams_data_center <-
nba_teams_data %>%
mutate(ORtg = ORtg - mean(ORtg),
DRtg = DRtg - mean(DRtg),
SOS = SOS - mean(SOS),
test_train = rbinom(dim(nba_teams_data)[1], 1, 0.5))
# Creat test and train datasets
nba_teams_train <- nba_teams_data_center %>% filter(test_train==0)
nba_teams_test <- nba_teams_data_center %>% filter(test_train==1)
# Fit linear model
lm_fit <- lm(W~ORtg+DRtg+SOS, data=nba_teams_train)
# Predict on test
test_set_predicts <- predict(lm_fit, newdata = nba_teams_test)
nba_teams_test <- nba_teams_test %>%
mutate(predicted_wins = test_set_predicts)
# Calc MSE
lm_abse <- mean(abs(nba_teams_test$W - nba_teams_test$predicted_wins))
lm_mse <- mean((nba_teams_test$W - nba_teams_test$predicted_wins)^2)
print(paste0("Training Set; MSE = ", mean(abs(lm_fit$residuals))))
print(paste0("Training Set; Mean Absolute Error = ", mean((lm_fit$residuals)^2)))
print(paste0("Training Set; MSE = ", mean((lm_fit$residuals)^2)))
print(paste0("Training Set; Mean Absolute Error = ", mean(abs(lm_fit$residuals))))
print(paste0("Testing Set; MSE = ", lm_mse))
print(paste0("Testing Set; Mean Absolute Error = ", lm_abse))
# Center to make intercept interpretable
nba_teams_data_center <-
nba_teams_data %>%
mutate(ORtg = ORtg - mean(ORtg),
DRtg = DRtg - mean(DRtg),
SOS = SOS - mean(SOS),
test_train = rbinom(dim(nba_teams_data)[1], 1, 0.5))
# Creat test and train datasets
nba_teams_train <- nba_teams_data_center %>% filter(test_train==0)
nba_teams_test <- nba_teams_data_center %>% filter(test_train==1)
# Fit linear model
lm_fit <- lm(W~ORtg+DRtg+SOS, data=nba_teams_train)
# Predict on test
test_set_predicts <- predict(lm_fit, newdata = nba_teams_test)
nba_teams_test <- nba_teams_test %>%
mutate(predicted_wins = test_set_predicts)
# Calc MSE
lm_abse <- mean(abs(nba_teams_test$W - nba_teams_test$predicted_wins))
lm_mse <- mean((nba_teams_test$W - nba_teams_test$predicted_wins)^2)
print(paste0("Training Set; MSE = ", mean((lm_fit$residuals)^2)))
print(paste0("Training Set; Mean Absolute Error = ", mean(abs(lm_fit$residuals))))
print(paste0("Testing Set; MSE = ", lm_mse))
print(paste0("Testing Set; Mean Absolute Error = ", lm_abse))
# Center to make intercept interpretable
# Also set seed to get same split
set.seed(seed=012)
nba_teams_data_center <-
nba_teams_data %>%
mutate(ORtg = ORtg - mean(ORtg),
DRtg = DRtg - mean(DRtg),
SOS = SOS - mean(SOS),
test_train = rbinom(dim(nba_teams_data)[1], 1, 0.5))
# Creat test and train datasets
nba_teams_train <- nba_teams_data_center %>% filter(test_train==0)
nba_teams_test <- nba_teams_data_center %>% filter(test_train==1)
# Fit linear model
lm_fit <- lm(W~ORtg+DRtg+SOS, data=nba_teams_train)
# Predict on test
test_set_predicts <- predict(lm_fit, newdata = nba_teams_test)
nba_teams_test <- nba_teams_test %>%
mutate(predicted_wins = test_set_predicts)
# Calc MSE
lm_abse <- mean(abs(nba_teams_test$W - nba_teams_test$predicted_wins))
lm_mse <- mean((nba_teams_test$W - nba_teams_test$predicted_wins)^2)
print(paste0("Training Set; MSE = ", mean((lm_fit$residuals)^2)))
print(paste0("Training Set; Mean Absolute Error = ", mean(abs(lm_fit$residuals))))
print(paste0("Testing Set; MSE = ", lm_mse))
print(paste0("Testing Set; Mean Absolute Error = ", lm_abse))
