library(reshape2)
student_data_full <- read_csv(file = "../data/grad_admissions/Admission_Predict.csv")
student_data <- student_data_full%>%
select(`Chance of Admit`, `GRE Score`, CGPA) %>%
plyr::rename(c("Chance of Admit"="admit",
"GRE Score"="gre"))
knnFit <- train(admit ~ ., data = student_data, method = "knn", tuneLength = 20)
# Look at tuning results
knnFit
plot(knnFit)
# Add in predicted values at "best" tuning value
student_data$knn_pred_admit <- predict(knnFit)
# Compute RMSE
paste0("RMSE=",
round(sqrt(mean((student_data$knn_pred_admit-student_data$admit)^2)), 7))
# Plot predicted values
ggarrange(plotlist=
list(ggplot(data=student_data, mapping=aes(x=gre, y=CGPA, color=knn_pred_admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values"),
ggplot(data=student_data, mapping=aes(x=gre, y=CGPA, color=admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values")),
nrow=1)
student_data <- student_data %>% select(-knn_pred_admit)
set.seed(12)
student_data_tt_index <- createDataPartition(student_data$admit, p=0.6, list = FALSE)
student_data_train <- student_data[student_data_tt_index,]
student_data_test <- student_data[-student_data_tt_index,]
knnFit <- train(admit ~ ., data = student_data_train, method = "knn", tuneLength = 20)
# Look at tuning results
knnFit
plot(knnFit)
# Add in predicted values at "best" tuning value
student_data_test$knn_pred_admit <- predict(knnFit, newdata = student_data_test)
# Compute RMSE
paste0("Test RMSE=",
round(sqrt(mean((student_data_test$knn_pred_admit-student_data_test$admit)^2)), 7))
# Plot predicted values
ggarrange(plotlist=
list(ggplot(data=student_data_test, mapping=aes(x=gre, y=CGPA, color=knn_pred_admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values"),
ggplot(data=student_data_test, mapping=aes(x=gre, y=CGPA, color=admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values")),
nrow=1)
x <- rnorm(100, mean=3)
e <- rnorm(100, sd=2)
y <- 1+x+e
pred <- 1+x
data <- data.frame("x"=x, "y"=y, "pred"=pred)
ggplot(data=data, mapping=aes(x=x, y=y))+
geom_point(color="red")+
geom_segment(aes(xend = x, yend = pred))+
geom_line(aes(y=pred), color="blue")+
theme_classic()
lm_fit <- lm(formula = admit~., data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
cor_matrix <- melt(round(cor(x=as.matrix(student_data), y=as.matrix(student_data)),2))
ggplot(cor_matrix, aes(Var2, forcats::fct_rev(Var1), fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
coord_fixed()+
geom_text(aes(Var2, Var1, label = value), color = "white", size = 8)+
labs(x="", y="")+
theme_minimal()+
theme(axis.text.x =
element_text(angle = 45, vjust = 1,
size = 20, hjust = 1),
axis.text.y =
element_text(size = 20))
student_data_full$Research
student_data_full$`University Rating`
student_data <- student_data_full %>%
mutate(`University Rating`=factor(`University Rating`)) %>%
plyr::rename(c("Chance of Admit"="admit",
"prestige"="University Rating"))
lm_fit <- lm(formula = admit~prestige, data=student_data)
student_data <- student_data_full %>%
mutate(`University Rating`=factor(`University Rating`)) %>%
plyr::rename(c("Chance of Admit"="admit",
"prestige"="University Rating"))
student_data <- student_data_full %>%
mutate(`University Rating`=factor(`University Rating`)) %>%
plyr::rename(c("Chance of Admit"="admit",
"University Rating"="prestige"))
lm_fit <- lm(formula = admit~prestige, data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
student_data <- student_data_full %>%
mutate(`University Rating`=factor(`University Rating`-1)) %>%
plyr::rename(c("Chance of Admit"="admit",
"University Rating"="prestige"))
lm_fit <- lm(formula = admit~prestige, data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
names(student_data)
lm_fit <- lm(formula = admit~Research+CGPA+Research*CGPA, data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
lm_fit <- lm(formula = prestige~+CGPA+prestige*CGPA, data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
lm_fit <- lm(formula = prestige+CGPA+prestige*CGPA, data=student_data)
lm_fit <- lm(formula = admit~prestige+CGPA+prestige*CGPA, data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
lm_fit <- lm(formula = admit~+CGPA+Research*CGPA, data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
student_data <- student_data %>%
mutate(CGPA_c = CGPA - mean(student_data$CGPA))
# Center CGPA
student_data <- student_data %>%
mutate(CGPA_c = CGPA - mean(student_data$CGPA))
lm_fit <- lm(formula = admit~+CGPA_c+Research*CGPA_c, data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 6, fig.height = 3)
library(tidyverse)
library(ggpubr)
library(scales)
library(broom)
library(flextable)
library(scatterplot3d)
library(rgl)
library(caret)
library(reshape2)
student_data_full <- read_csv(file = "../data/grad_admissions/Admission_Predict.csv")
student_data <- student_data_full%>%
select(`Chance of Admit`, `GRE Score`, CGPA) %>%
plyr::rename(c("Chance of Admit"="admit",
"GRE Score"="gre"))
knnFit <- train(admit ~ ., data = student_data, method = "knn", tuneLength = 20)
# Look at tuning results
knnFit
plot(knnFit)
# Add in predicted values at "best" tuning value
student_data$knn_pred_admit <- predict(knnFit)
# Compute RMSE
paste0("RMSE=",
round(sqrt(mean((student_data$knn_pred_admit-student_data$admit)^2)), 7))
# Plot predicted values
ggarrange(plotlist=
list(ggplot(data=student_data, mapping=aes(x=gre, y=CGPA, color=knn_pred_admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values"),
ggplot(data=student_data, mapping=aes(x=gre, y=CGPA, color=admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values")),
nrow=1)
student_data <- student_data %>% select(-knn_pred_admit)
set.seed(12)
student_data_tt_index <- createDataPartition(student_data$admit, p=0.6, list = FALSE)
student_data_train <- student_data[student_data_tt_index,]
student_data_test <- student_data[-student_data_tt_index,]
knnFit <- train(admit ~ ., data = student_data_train, method = "knn", tuneLength = 20)
# Look at tuning results
knnFit
plot(knnFit)
# Add in predicted values at "best" tuning value
student_data_test$knn_pred_admit <- predict(knnFit, newdata = student_data_test)
# Compute RMSE
paste0("Test RMSE=",
round(sqrt(mean((student_data_test$knn_pred_admit-student_data_test$admit)^2)), 7))
# Plot predicted values
ggarrange(plotlist=
list(ggplot(data=student_data_test, mapping=aes(x=gre, y=CGPA, color=knn_pred_admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values"),
ggplot(data=student_data_test, mapping=aes(x=gre, y=CGPA, color=admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values")),
nrow=1)
x <- rnorm(100, mean=3)
e <- rnorm(100, sd=2)
y <- 1+x+e
pred <- 1+x
data <- data.frame("x"=x, "y"=y, "pred"=pred)
ggplot(data=data, mapping=aes(x=x, y=y))+
geom_point(color="red")+
geom_segment(aes(xend = x, yend = pred))+
geom_line(aes(y=pred), color="blue")+
theme_classic()
lm_fit <- lm(formula = admit~., data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
cor_matrix <- melt(round(cor(x=as.matrix(student_data), y=as.matrix(student_data)),2))
ggplot(cor_matrix, aes(Var2, forcats::fct_rev(Var1), fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
coord_fixed()+
geom_text(aes(Var2, Var1, label = value), color = "white", size = 8)+
labs(x="", y="")+
theme_minimal()+
theme(axis.text.x =
element_text(angle = 45, vjust = 1,
size = 20, hjust = 1),
axis.text.y =
element_text(size = 20))
student_data <- student_data_full %>%
mutate(`University Rating`=factor(`University Rating`-1)) %>%
plyr::rename(c("Chance of Admit"="admit",
"University Rating"="prestige"))
lm_fit <- lm(formula = admit~prestige, data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
# Center CGPA
student_data <- student_data %>%
mutate(CGPA_c = CGPA - mean(student_data$CGPA))
lm_fit <- lm(formula = admit~+CGPA_c+Research*CGPA_c, data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
# Center CGPA
student_data <- student_data %>%
mutate(CGPA_c = CGPA - mean(student_data$CGPA))
lm_fit <- lm(formula = admit~Research+CGPA_c+Research*CGPA_c, data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
# Compare R2 without interaction
lm_fit_no_int <- lm(formula = admit~Research+CGPA_c, data=student_data)
test <- summary(lm_fit_no_int)
test$r.squared
predict(lm_fit_no_int)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 6, fig.height = 3)
library(tidyverse)
library(ggpubr)
library(scales)
library(broom)
library(flextable)
library(scatterplot3d)
library(rgl)
library(caret)
library(reshape2)
student_data_full <- read_csv(file = "../data/grad_admissions/Admission_Predict.csv")
student_data <- student_data_full%>%
select(`Chance of Admit`, `GRE Score`, CGPA) %>%
plyr::rename(c("Chance of Admit"="admit",
"GRE Score"="gre"))
knnFit <- train(admit ~ ., data = student_data, method = "knn", tuneLength = 20)
# Look at tuning results
knnFit
plot(knnFit)
# Add in predicted values at "best" tuning value
student_data$knn_pred_admit <- predict(knnFit)
# Compute RMSE
paste0("RMSE=",
round(sqrt(mean((student_data$knn_pred_admit-student_data$admit)^2)), 7))
# Plot predicted values
ggarrange(plotlist=
list(ggplot(data=student_data, mapping=aes(x=gre, y=CGPA, color=knn_pred_admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values"),
ggplot(data=student_data, mapping=aes(x=gre, y=CGPA, color=admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values")),
nrow=1)
student_data <- student_data %>% select(-knn_pred_admit)
set.seed(12)
student_data_tt_index <- createDataPartition(student_data$admit, p=0.6, list = FALSE)
student_data_train <- student_data[student_data_tt_index,]
student_data_test <- student_data[-student_data_tt_index,]
knnFit <- train(admit ~ ., data = student_data_train, method = "knn", tuneLength = 20)
# Look at tuning results
knnFit
plot(knnFit)
# Add in predicted values at "best" tuning value
student_data_test$knn_pred_admit <- predict(knnFit, newdata = student_data_test)
# Compute RMSE
paste0("Test RMSE=",
round(sqrt(mean((student_data_test$knn_pred_admit-student_data_test$admit)^2)), 7))
# Plot predicted values
ggarrange(plotlist=
list(ggplot(data=student_data_test, mapping=aes(x=gre, y=CGPA, color=knn_pred_admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values"),
ggplot(data=student_data_test, mapping=aes(x=gre, y=CGPA, color=admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values")),
nrow=1)
x <- rnorm(100, mean=3)
e <- rnorm(100, sd=2)
y <- 1+x+e
pred <- 1+x
data <- data.frame("x"=x, "y"=y, "pred"=pred)
ggplot(data=data, mapping=aes(x=x, y=y))+
geom_point(color="red")+
geom_segment(aes(xend = x, yend = pred))+
geom_line(aes(y=pred), color="blue")+
theme_classic()
lm_fit <- lm(formula = admit~., data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
cor_matrix <- melt(round(cor(x=as.matrix(student_data), y=as.matrix(student_data)),2))
ggplot(cor_matrix, aes(Var2, forcats::fct_rev(Var1), fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
coord_fixed()+
geom_text(aes(Var2, Var1, label = value), color = "white", size = 8)+
labs(x="", y="")+
theme_minimal()+
theme(axis.text.x =
element_text(angle = 45, vjust = 1,
size = 20, hjust = 1),
axis.text.y =
element_text(size = 20))
student_data <- student_data_full %>%
mutate(`University Rating`=factor(`University Rating`-1)) %>%
plyr::rename(c("Chance of Admit"="admit",
"University Rating"="prestige"))
lm_fit <- lm(formula = admit~prestige, data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
# Center CGPA
student_data <- student_data %>%
mutate(CGPA_c = CGPA - mean(student_data$CGPA))
lm_fit <- lm(formula = admit~Research+CGPA_c+Research*CGPA_c, data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
# Compare R2 without interaction
lm_fit_no_int <- lm(formula = admit~Research+CGPA_c, data=student_data)
r2_no_int <- round(summary(lm_fit_no_int)$r.squared, 3)
r2_int <- round(summary(lm_fit)$r.squared, 3)
student_data_lm <- student_data
student_data_lm$lm_pred_no_int <- predict(lm_fit_no_int)
student_data_lm$lm_pred_int <- predict(lm_fit)
ggplot(data=student_data_lm, mapping=aes(x=CGPA, y=admit, color=Research))+
geom_point()+
geom_line(mapping=aes(y=lm_pred_no_int))
student_data$CGPA
pred_df <- expand.grid(seq(8, 10, by=0.25), c(0, 1))
pred_df
student_data$CGPA_c
pred_df$predict_no_int <- predict(lm_pred_no_int, new_data)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 6, fig.height = 3)
library(tidyverse)
library(ggpubr)
library(scales)
library(broom)
library(flextable)
library(scatterplot3d)
library(rgl)
library(caret)
library(reshape2)
student_data_full <- read_csv(file = "../data/grad_admissions/Admission_Predict.csv")
student_data <- student_data_full%>%
select(`Chance of Admit`, `GRE Score`, CGPA) %>%
plyr::rename(c("Chance of Admit"="admit",
"GRE Score"="gre"))
knnFit <- train(admit ~ ., data = student_data, method = "knn", tuneLength = 20)
# Look at tuning results
knnFit
plot(knnFit)
# Add in predicted values at "best" tuning value
student_data$knn_pred_admit <- predict(knnFit)
# Compute RMSE
paste0("RMSE=",
round(sqrt(mean((student_data$knn_pred_admit-student_data$admit)^2)), 7))
# Plot predicted values
ggarrange(plotlist=
list(ggplot(data=student_data, mapping=aes(x=gre, y=CGPA, color=knn_pred_admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values"),
ggplot(data=student_data, mapping=aes(x=gre, y=CGPA, color=admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values")),
nrow=1)
student_data <- student_data %>% select(-knn_pred_admit)
set.seed(12)
student_data_tt_index <- createDataPartition(student_data$admit, p=0.6, list = FALSE)
student_data_train <- student_data[student_data_tt_index,]
student_data_test <- student_data[-student_data_tt_index,]
knnFit <- train(admit ~ ., data = student_data_train, method = "knn", tuneLength = 20)
# Look at tuning results
knnFit
plot(knnFit)
# Add in predicted values at "best" tuning value
student_data_test$knn_pred_admit <- predict(knnFit, newdata = student_data_test)
# Compute RMSE
paste0("Test RMSE=",
round(sqrt(mean((student_data_test$knn_pred_admit-student_data_test$admit)^2)), 7))
# Plot predicted values
ggarrange(plotlist=
list(ggplot(data=student_data_test, mapping=aes(x=gre, y=CGPA, color=knn_pred_admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values"),
ggplot(data=student_data_test, mapping=aes(x=gre, y=CGPA, color=admit))+
geom_point()+
theme_classic()+
labs(title="Predicted Values")),
nrow=1)
x <- rnorm(100, mean=3)
e <- rnorm(100, sd=2)
y <- 1+x+e
pred <- 1+x
data <- data.frame("x"=x, "y"=y, "pred"=pred)
ggplot(data=data, mapping=aes(x=x, y=y))+
geom_point(color="red")+
geom_segment(aes(xend = x, yend = pred))+
geom_line(aes(y=pred), color="blue")+
theme_classic()
lm_fit <- lm(formula = admit~., data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
cor_matrix <- melt(round(cor(x=as.matrix(student_data), y=as.matrix(student_data)),2))
ggplot(cor_matrix, aes(Var2, forcats::fct_rev(Var1), fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
coord_fixed()+
geom_text(aes(Var2, Var1, label = value), color = "white", size = 8)+
labs(x="", y="")+
theme_minimal()+
theme(axis.text.x =
element_text(angle = 45, vjust = 1,
size = 20, hjust = 1),
axis.text.y =
element_text(size = 20))
student_data <- student_data_full %>%
mutate(`University Rating`=factor(`University Rating`-1)) %>%
plyr::rename(c("Chance of Admit"="admit",
"University Rating"="prestige"))
lm_fit <- lm(formula = admit~prestige, data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
# Center CGPA
student_data <- student_data %>%
mutate(CGPA_c = CGPA - mean(student_data$CGPA))
lm_fit <- lm(formula = admit~Research+CGPA_c+Research*CGPA_c, data=student_data)
tidy(lm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 2)))) %>%
flextable()
# Compare R2 without interaction
lm_fit_no_int <- lm(formula = admit~Research+CGPA_c, data=student_data)
r2_no_int <- round(summary(lm_fit_no_int)$r.squared, 3)
r2_int <- round(summary(lm_fit)$r.squared, 3)
pred_df <- expand.grid(seq(8, 10, by=0.25),
seq(-2, 2, by=0.25),
c(0, 1)) %>%
plyr::rename(c("Var1"="CGPA",
"Var2"="CGPA_c",
"Var3"="Research"))
pred_df$predict_no_int <- predict(lm_fit_no_int, new_data)
pred_df <- expand.grid(seq(8, 10, by=0.25),
seq(-2, 2, by=0.25),
c(0, 1)) %>%
plyr::rename(c("Var1"="CGPA",
"Var2"="CGPA_c",
"Var3"="Research"))
pred_df$predict_no_int <- predict(lm_fit_no_int, new_data=pred_df)
