log(x/(1-x))
}
exbit <- function(x){
exp(x)/(1+exp(x))
}
x_domain_p <- seq(0, 1, by=0.01)
x_domain_p[x_domain_p==0] <- 0.01
x_domain_p[x_domain_p==1] <- 0.99
y_logit <- logit(x_domain_p)
x_domain_logit <- y_logit
y_exbit <- exbit(x_domain_logit)
plot_data <- data.frame(x_domain_p, y_logit, x_domain_logit, y_exbit)
ggplot(data=plot_data,
mapping=aes(x=x_domain_p, y=y_logit))+
geom_line()
ggplot(data=plot_data,
mapping=aes(x=x_domain_logit, y=y_exbit))+
geom_line()
ggplot(data=plot_data,
mapping=aes(x=x_domain_p, y=y_logit))+
geom_line()+
xlab("Conditional Probability")+
ylab("Logit")+
theme_classic()
logit <- function(x){
log(x/(1-x))
}
exbit <- function(x){
exp(x)/(1+exp(x))
}
x_domain_p <- seq(0, 1, by=0.01)
x_domain_p[x_domain_p==0] <- 0.01
x_domain_p[x_domain_p==1] <- 0.99
y_logit <- logit(x_domain_p)
x_domain_logit <- y_logit
y_exbit <- exbit(x_domain_logit)
plot_data <- data.frame(x_domain_p, y_logit, x_domain_logit, y_exbit)
ggplot(data=plot_data,
mapping=aes(x=x_domain_p, y=y_logit))+
geom_line()+
xlab("Conditional Probability")+
ylab("Logit")+
theme_classic()
ggplot(data=plot_data,
mapping=aes(x=x_domain_logit, y=y_exbit))+
geom_line()+
xlab("Logit")+
ylab("Inverse Logit (Conditional Probability)")+
theme_classic()
prob_to_logit_plot <-
ggplot(data=plot_data,
mapping=aes(x=x_domain_p, y=y_logit))+
geom_line()+
xlab("Conditional Probability")+
ylab("Logit")+
theme_classic()
logit_to_prob_plot <-
ggplot(data=plot_data,
mapping=aes(x=x_domain_logit, y=y_exbit))+
geom_line()+
xlab("Logit")+
ylab("Inverse Logit (Conditional Probability)")+
theme_classic()
?expression
expression("f(x)")
ggplot(data=plot_data,
mapping=aes(x=x_domain_p, y=y_logit))+
geom_line()+
xlab("Conditional Probability")+
ylab("Logit")+
labs(title = paste0("Plotting ",
exp(logit(x)),
": probability to logit"))
ggplot(data=plot_data,
mapping=aes(x=x_domain_p, y=y_logit))+
geom_line()+
xlab("Conditional Probability")+
ylab("Logit")+
labs(title = paste0("Plotting ",
exppression(logit(x)),
": probability to logit"))
ggplot(data=plot_data,
mapping=aes(x=x_domain_p, y=y_logit))+
geom_line()+
xlab("Conditional Probability")+
ylab("Logit")+
labs(title = paste0("Plotting ",
expression(logit(x)),
": probability to logit"))
theme_classic()
ggplot(data=plot_data,
mapping=aes(x=x_domain_p, y=y_logit))+
geom_line()+
xlab("Conditional Probability")+
ylab("Logit")+
labs(title = paste0("Plotting ",
expression(logit(x)),
": probability to logit"))+
theme_classic()
ggplot(data=plot_data,
mapping=aes(x=x_domain_p, y=y_logit))+
geom_line()+
xlab("Conditional Probability")+
ylab("Logit")+
labs(title = paste0("Plotting ",
"logit(x)",
": probability to logit"))+
theme_classic()
ggplot(data=plot_data,
mapping=aes(x=x_domain_logit, y=y_exbit))+
geom_line()+
xlab("Logit")+
ylab("Inverse Logit (Conditional Probability)")+
labs(title = paste0("Transforming logit to probability: ",
expression(frac(e^{x},1+e^{x}))))+
theme_classic()
ggplot(data=plot_data,
mapping=aes(x=x_domain_logit, y=y_exbit))+
geom_line()+
xlab("Logit")+
ylab("Inverse Logit (Conditional Probability)")+
labs(title = paste0("Transforming logit to probability: ",
expression(frac(e,1+e))))+
theme_classic()
ggplot(data=plot_data,
mapping=aes(x=x_domain_logit, y=y_exbit))+
geom_line()+
xlab("Logit")+
ylab("Inverse Logit (Conditional Probability)")+
labs(title =
expression(paste0("Transforming logit to probability: ",
frac(e,1+e))))+
theme_classic()
ggplot(data=plot_data,
mapping=aes(x=x_domain_logit, y=y_exbit))+
geom_line()+
xlab("Logit")+
ylab("Inverse Logit (Conditional Probability)")+
labs(title =
expression(paste("Transforming logit to probability: ",
frac(e,1+e))))+
theme_classic()
ggplot(data=plot_data,
mapping=aes(x=x_domain_logit, y=y_exbit))+
geom_line()+
xlab("Logit")+
ylab("Inverse Logit (Conditional Probability)")+
labs(title =
expression(paste("Transforming logit to probability: ",
frac(e^{x},1+e))))+
theme_classic()
ggplot(data=plot_data,
mapping=aes(x=x_domain_logit, y=y_exbit))+
geom_line()+
xlab("Logit")+
ylab("Inverse Logit (Conditional Probability)")+
labs(title =
expression(paste("Transforming logit to probability: ",
frac(e^{x},1+e^{x}))))+
theme_classic()+
theme(text = element_text(size=15))
ggplot(data=plot_data,
mapping=aes(x=x_domain_p, y=y_logit))+
geom_line()+
xlab("Conditional Probability")+
ylab("Logit")+
labs(title = paste0("Plotting ",
"logit(x)",
": probability to logit"))+
theme_classic()+
theme(text = element_text(size=15))
logit <- function(x){
log(x/(1-x))
}
exbit <- function(x){
exp(x)/(1+exp(x))
}
x_domain_p <- seq(0, 1, by=0.01)
x_domain_p[x_domain_p==0] <- 0.01
x_domain_p[x_domain_p==1] <- 0.99
y_logit <- logit(x_domain_p)
x_domain_logit <- y_logit
y_exbit <- exbit(x_domain_logit)
plot_data <- data.frame(x_domain_p, y_logit, x_domain_logit, y_exbit)
prob_to_logit_plot <-
ggplot(data=plot_data,
mapping=aes(x=x_domain_p, y=y_logit))+
geom_line()+
xlab("Conditional Probability")+
ylab("Logit")+
labs(title = "Transforming probability to logit: logit(p)")+
theme_classic()+
theme(text = element_text(size=15))
logit_to_prob_plot <-
ggplot(data=plot_data,
mapping=aes(x=x_domain_logit, y=y_exbit))+
geom_line()+
xlab("Logit")+
ylab("Inverse Logit (Conditional Probability)")+
labs(title =
expression(paste("Transforming logit to probability: ",
frac(e^{x},1+e^{x}))))+
theme_classic()+
theme(text = element_text(size=15))
ggarrange(plotlist = list(prob_to_logit_plot, logit_to_prob_plot),
nrow=1)
heart_data$heart_disease
summary(glm_fit)
glm_fit <-
glm(heart_disease~MAX_Heart_Rate+Age,
family=binomial(),
data=heart_data)
summary(glm_fit)
log_reg_table <- tidy(glm_fit)
log_reg_table
log_reg_table <-
tidy(glm_fit) %>%
flextable()
log_reg_table
summary(glm_fit)
glm_fit <-
glm(heart_disease~MAX_Heart_Rate+Age,
family=binomial(),
data=heart_data)
summary(glm_fit)
log_reg_table <-
tidy(glm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 3))),
term=fct_recode(factor(term),
"Intercept"="(Intercept)",
"Max Heart Rate"=
"MAX_Heart_Rate"))
flextable() %>%
set_header_labels("term"="Variable",
"estimate"="Estimate",
"std.error"="Std. Error",
"statistic"="Z Statistic",
"p.value"="P-value")
glm_fit <-
glm(heart_disease~MAX_Heart_Rate+Age,
family=binomial(),
data=heart_data)
summary(glm_fit)
log_reg_table <-
tidy(glm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 3))),
term=fct_recode(factor(term),
"Intercept"="(Intercept)",
"Max Heart Rate"=
"MAX_Heart_Rate")) %>%
flextable() %>%
set_header_labels("term"="Variable",
"estimate"="Estimate",
"std.error"="Std. Error",
"statistic"="Z Statistic",
"p.value"="P-value")
glm_fit <-
glm(heart_disease~MAX_Heart_Rate+Age,
family=binomial(),
data=heart_data)
# Raw output
summary(glm_fit)
# Format output
tidy(glm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 3))),
term=fct_recode(factor(term),
"Intercept"="(Intercept)",
"Max Heart Rate"=
"MAX_Heart_Rate")) %>%
flextable() %>%
set_header_labels("term"="Variable",
"estimate"="Estimate",
"std.error"="Std. Error",
"statistic"="Z Statistic",
"p.value"="P-value")
glm_fit <-
glm(heart_disease~MAX_Heart_Rate+Age,
family=binomial(),
data=heart_data)
# Raw output
summary(glm_fit)
# Format output
tidy(glm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 3))),
term=fct_recode(factor(term),
"Intercept"="(Intercept)",
"Max Heart Rate"=
"MAX_Heart_Rate")) %>%
flextable() %>%
set_header_labels("term"="Variable",
"estimate"="Estimate",
"std.error"="Std. Error",
"statistic"="Z Statistic",
"p.value"="P-value") %>%
autofit()
# Format output
tidy(glm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 3))),
term=fct_recode(factor(term),
"Intercept"="(Intercept)",
"Max Heart Rate"=
"MAX_Heart_Rate")) %>%
flextable() %>%
set_header_labels("term"="Variable",
"estimate"="Estimate",
"std.error"="Std. Error",
"statistic"="Z Statistic",
"p.value"="P-value") %>%
autofit()
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.width = 6, fig.height = 3)
library(tidyverse)
library(ggpubr)
library(scales)
library(broom)
library(flextable)
library(scatterplot3d)
library(rgl)
library(caret)
library(reshape2)
heart_data <- read_csv(file="../data/heart_disease/Correct_Dataset.csv") %>%
mutate(heart_disease =
relevel(factor(ifelse(Target>0, "Yes", "No")),
ref = "No"))
scatter <-
ggplot(data = heart_data,
mapping = aes(x=MAX_Heart_Rate, y=Age,
color=heart_disease, shape=heart_disease))+
geom_point()+
labs(x="Max Heart Rate", color="Heart Disease",
shape="Heart Disease")+
theme_classic()+
theme(legend.position = "none")
box_heart_rate <-
ggplot(data=heart_data,
mapping = aes(x=heart_disease, y=MAX_Heart_Rate,
fill=heart_disease))+
geom_boxplot()+
labs(x="Heart Disease", fill="Heart Disease",
y="Max Heart Rate")+
theme_classic()+
theme(legend.position = "none")
box_age <-
ggplot(data=heart_data,
mapping = aes(x=heart_disease, y=Age,
fill=heart_disease))+
geom_boxplot()+
labs(x="Heart Disease", fill="Heart Disease",
y="Age (years)")+
theme_classic()+
theme(legend.position = "none")
ggarrange(plotlist=list(scatter, box_heart_rate, box_age),
nrow = 1)
heart_data <-
heart_data %>%
mutate(heart_disease_num =
ifelse(Target>0, 1, 0))
heart_data$prob_heart_disease_linear <-
predict(lm(heart_disease_num~MAX_Heart_Rate,
data=heart_data))
heart_data$prob_heart_disease_logit <-
predict(glm(heart_disease_num~MAX_Heart_Rate,
family=binomial(),
data=heart_data))
heart_data <-
heart_data %>%
mutate(prob_heart_disease_logistic =
exp(prob_heart_disease_logit)/(1+exp(prob_heart_disease_logit)))
scatter_linear <-
ggplot(data = heart_data,
mapping = aes(x=MAX_Heart_Rate, y=heart_disease_num))+
geom_point(aes(color=factor(heart_disease_num)))+
geom_line(mapping=aes(y=prob_heart_disease_linear))+
scale_y_continuous(breaks=seq(0, 1.2, 0.2))+
labs(x="Max Heart Rate", y="Heart Disease",
color="Heart Disease")+
theme_classic()+
theme(legend.position = "none")
scatter_logistic <-
ggplot(data = heart_data,
mapping = aes(x=MAX_Heart_Rate, y=heart_disease_num))+
geom_point(aes(color=factor(heart_disease_num)))+
geom_line(mapping=aes(y=prob_heart_disease_logistic))+
scale_y_continuous(breaks=seq(0, 1.2, 0.2))+
labs(x="Max Heart Rate", y="Heart Disease",
color="Heart Disease")+
theme_classic()+
theme(legend.position = "none")
ggarrange(plotlist=list(scatter_linear, scatter_logistic),
nrow = 1)
logit <- function(x){
log(x/(1-x))
}
exbit <- function(x){
exp(x)/(1+exp(x))
}
x_domain_p <- seq(0, 1, by=0.01)
x_domain_p[x_domain_p==0] <- 0.01
x_domain_p[x_domain_p==1] <- 0.99
y_logit <- logit(x_domain_p)
x_domain_logit <- y_logit
y_exbit <- exbit(x_domain_logit)
plot_data <- data.frame(x_domain_p, y_logit, x_domain_logit, y_exbit)
prob_to_logit_plot <-
ggplot(data=plot_data,
mapping=aes(x=x_domain_p, y=y_logit))+
geom_line()+
xlab("Conditional Probability")+
ylab("Logit")+
labs(title = "Transforming probability to logit: logit(p)")+
theme_classic()+
theme(text = element_text(size=15))
logit_to_prob_plot <-
ggplot(data=plot_data,
mapping=aes(x=x_domain_logit, y=y_exbit))+
geom_line()+
xlab("Logit")+
ylab("Inverse Logit (Conditional Probability)")+
labs(title =
expression(paste("Transforming logit to probability: ",
frac(e^{x},1+e^{x}))))+
theme_classic()+
theme(text = element_text(size=15))
ggarrange(plotlist = list(prob_to_logit_plot, logit_to_prob_plot),
nrow=1)
glm_fit <-
glm(heart_disease~MAX_Heart_Rate+Age,
family=binomial(),
data=heart_data)
# Raw output
summary(glm_fit)
# Format output
tidy(glm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 3))),
term=fct_recode(factor(term),
"Intercept"="(Intercept)",
"Max Heart Rate"=
"MAX_Heart_Rate")) %>%
flextable() %>%
set_header_labels("term"="Variable",
"estimate"="Estimate",
"std.error"="Std. Error",
"statistic"="Z Statistic",
"p.value"="P-value") %>%
autofit()
# Format output
tidy(glm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 3))),
term=fct_recode(factor(term),
"Intercept"="(Intercept)",
"Max Heart Rate"=
"MAX_Heart_Rate")) %>%
flextable() %>%
set_header_labels("term"="Variable",
"estimate"="Estimate",
"std.error"="Std. Error",
"statistic"="Z Statistic",
"p.value"="P-value") %>%
autofit()
heart_data <- heart_data %>%
mutate(MAX_Heart_Rate_center =
MAX_Heart_Rate - mean(heart_data$MAX_Heart_Rate, na.rm = TRUE),
age_center =
Age - mean(heart_data$Age, na.rm = TRUE))
glm_fit_center <-
glm(heart_disease~MAX_Heart_Rate_center+age_center,
family=binomial(),
data=heart_data)
# Raw output
summary(glm_fit)
# Format output
tidy(glm_fit) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 3))),
term=fct_recode(factor(term),
"Intercept"="(Intercept)",
"Max Heart Rate centered"=
"MAX_Heart_Rate_center",
"Age (years) centered"=
"age_center")) %>%
flextable() %>%
set_header_labels("term"="Variable",
"estimate"="Estimate",
"std.error"="Std. Error",
"statistic"="Z Statistic",
"p.value"="P-value") %>%
autofit()
glm_fit_center
tidy(glm_fit_center) %>%
mutate(p.value=ifelse(p.value<0.005, "<0.005",
as.character(round(p.value, 3))),
term=fct_recode(factor(term),
"Intercept"="(Intercept)",
"Max Heart Rate centered"=
"MAX_Heart_Rate_center",
"Age (years) centered"=
"age_center")) %>%
flextable() %>%
set_header_labels("term"="Variable",
"estimate"="Estimate",
"std.error"="Std. Error",
"statistic"="Z Statistic",
"p.value"="P-value") %>%
autofit()
exp(4.84-0.041*150+0.02*65)/(1+exp(4.84-0.041*150+0.02*65))
